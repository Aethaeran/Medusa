{"version":3,"names":[],"mappings":"","sources":["js/ajax-episode-subtitles.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nconst MEDUSA = require('./core');\n\nconst startAjaxEpisodeSubtitles = function () {\n    const searchTypesList = ['.epSubtitlesSearch', '.epSubtitlesSearchPP', '.epRedownloadSubtitle', '.epSearch', '.epRetry', '.epManualSearch'];\n    const subtitlesResultModal = $('#manualSubtitleSearchModal');\n    const subtitlesMulti = MEDUSA.config.subtitlesMulti;\n    const loadingSpinner = 'images/loading32' + MEDUSA.config.themeSpinner + '.gif';\n    let subtitlesTd;\n    let selectedEpisode;\n\n    const disableAllSearches = () => {\n        // Disables all other searches while manual searching for subtitles\n        $.each(searchTypesList, (index, searchTypes) => {\n            $(searchTypes).css({\n                'pointer-events': 'none'\n            });\n        });\n    };\n\n    const enableAllSearches = () => {\n        // Enabled all other searches while manual searching for subtitles\n        $.each(searchTypesList, (index, searchTypes) => {\n            $(searchTypes).css({\n                'pointer-events': 'auto'\n            });\n        });\n    };\n\n    const changeImage = (imageTR, srcData, altData, titleData, heightData, emptyLink) => {\n        // eslint-disable-line max-params\n        if (emptyLink === true) {\n            imageTR.find('img').remove();\n        }\n        imageTR.append($('<img/>').prop({\n            src: srcData,\n            alt: altData,\n            title: titleData,\n            width: 16,\n            height: heightData\n        }));\n    };\n\n    subtitlesResultModal.on('hidden.bs.modal', () => {\n        // If user close manual subtitle search modal, enable again all searches\n        enableAllSearches();\n    });\n\n    $.ajaxEpSubtitlesSearch = function () {\n        const searchSubtitles = () => {\n            disableAllSearches();\n            changeImage(selectedEpisode, loadingSpinner, 'loading', 'loading', 16, true);\n            let url = selectedEpisode.prop('href');\n            // If manual search, replace handler\n            url = url.replace('searchEpisodeSubtitles', 'manual_search_subtitles');\n            $.getJSON(url, data => {\n                // Delete existing rows in the modal\n                const existingRows = $('#subtitle_results tr').length;\n                if (existingRows > 1) {\n                    for (let x = existingRows - 1; x > 0; x--) {\n                        $('#subtitle_results tr').eq(x).remove();\n                    }\n                }\n                // Add the release to the modal title\n                $('h4#manualSubtitleSearchModalTitle.modal-title').text(data.release);\n                if (data.result === 'success') {\n                    $.each(data.subtitles, (index, subtitle) => {\n                        // For each subtitle found create the row string and append to the modal\n                        const provider = '<img src=\"images/subtitles/' + subtitle.provider + '.png\" width=\"16\" height=\"16\" style=\"vertical-align:middle;\"/>';\n                        const flag = '<img src=\"images/subtitles/flags/' + subtitle.lang + '.png\" width=\"16\" height=\"11\"/>';\n                        let missingGuess = '';\n                        for (let i = 0; i < subtitle.missing_guess.length; i++) {\n                            let value = subtitle.missing_guess[i];\n                            if (missingGuess) {\n                                missingGuess += ', ';\n                            }\n                            value = value.charAt(0).toUpperCase() + value.slice(1);\n                            missingGuess += value.replace(/(_[a-z])/g, $1 => $1.toUpperCase().replace('_', ' '));\n                        }\n                        const subtitleName = subtitle.filename.substring(0, 99);\n                        let subtitleScore = subtitle.score;\n                        // If hash match, don't show missingGuess\n                        if (subtitle.sub_score >= subtitle.max_score) {\n                            missingGuess = '';\n                        }\n                        // If perfect match, add a checkmark next to subtitle filename\n                        let checkmark = '';\n                        if (subtitle.sub_score >= subtitle.min_score) {\n                            checkmark = '<img src=\"images/save.png\" width=\"16\" height=\"16\"/>';\n                        }\n                        const subtitleLink = '<a href=\"#\" id=\"pickSub\" title=\"Download subtitle: ' + subtitle.filename + '\" subtitleID=\"subtitleid-' + subtitle.id + '\">' + subtitleName + checkmark + '</a>';\n                        // Make subtitle score always between 0 and 10\n                        if (subtitleScore > 10) {\n                            subtitleScore = 10;\n                        } else if (subtitleScore < 0) {\n                            subtitleScore = 0;\n                        }\n                        const row = '<tr style=\"font-size: 95%;\">' + '<td style=\"white-space:nowrap;\">' + provider + ' ' + subtitle.provider + '</td>' + '<td>' + flag + '</td>' + '<td title=\"' + subtitle.sub_score + '/' + subtitle.min_score + '\"> ' + subtitleScore + '</td>' + '<td class=\"tvShow\"> ' + subtitleLink + '</td>' + '<td>' + missingGuess + '</td>' + '</tr>';\n                        $('#subtitle_results').append(row);\n                        // Allow the modal to be resizable\n                        $('.modal-content').resizable({\n                            alsoResize: '.modal-body'\n                        });\n                        // Allow the modal to be draggable\n                        $('.modal-dialog').draggable({\n                            cancel: '.text'\n                        });\n                        // After all rows are added, show the modal with results found\n                        subtitlesResultModal.modal('show');\n                    });\n                }\n                // Add back the CC icon as we are not searching anymore\n                changeImage(selectedEpisode, 'images/closed_captioning.png', 'Search subtitles', 'Search subtitles', 16, true);\n                enableAllSearches();\n            });\n            return false;\n        };\n\n        const forcedSearch = () => {\n            disableAllSearches();\n            changeImage(selectedEpisode, loadingSpinner, 'loading', 'loading', 16, true);\n            const url = selectedEpisode.prop('href');\n            $.getJSON(url, data => {\n                if (data.result.toLowerCase() === 'success') {\n                    // Clear and update the subtitles column with new informations\n                    const subtitles = data.subtitles.split(',');\n                    subtitlesTd.empty();\n                    $.each(subtitles, (index, language) => {\n                        if (language !== '') {\n                            if (index !== subtitles.length - 1) {\n                                // eslint-disable-line no-negated-condition\n                                changeImage(subtitlesTd, '', language, language, 11, true);\n                            } else {\n                                changeImage(subtitlesTd, 'images/subtitles/flags/' + language + '.png', language, language, 11, true);\n                            }\n                        }\n                    });\n                }\n                // Add back the CC icon as we are not searching anymore\n                changeImage(selectedEpisode, 'images/closed_captioning.png', 'Search subtitles', 'Search subtitles', 16, true);\n                enableAllSearches();\n            });\n            return false;\n        };\n\n        $('.epSubtitlesSearch').on('click', function (e) {\n            // This is for the page 'displayShow.mako'\n            e.preventDefault();\n            selectedEpisode = $(this);\n            subtitlesTd = selectedEpisode.parent().siblings('.col-subtitles');\n            // Ask user if he want to manual search subs or automatic search\n            $('#askmanualSubtitleSearchModal').modal('show');\n        });\n\n        $('.epSubtitlesSearchPP').on('click', function (e) {\n            // This is for the page 'manage_subtitleMissedPP.mako'\n            e.preventDefault();\n            selectedEpisode = $(this);\n            subtitlesTd = selectedEpisode.parent().siblings('.col-search');\n            searchSubtitles();\n        });\n\n        // @TODO: move this to a more specific selector\n        $(document).on('click', '#pickSub', function (e) {\n            e.preventDefault();\n            const subtitlePicked = $(this);\n            changeImage(subtitlePicked, loadingSpinner, 'loading', 'loading', 16, true);\n            let subtitleID = subtitlePicked.attr('subtitleID');\n            // Remove 'subtitleid-' so we know the actual ID\n            subtitleID = subtitleID.replace('subtitleid-', '');\n            let url = selectedEpisode.prop('href');\n            url = url.replace('searchEpisodeSubtitles', 'manual_search_subtitles');\n            // Append the ID param that 'manual_search_subtitles' expect when picking subtitles\n            url += '&picked_id=' + encodeURIComponent(subtitleID);\n            $.getJSON(url, data => {\n                // If user click to close the window before subtitle download finishes, show again the modal\n                if (subtitlesResultModal.is(':visible') === false) {\n                    subtitlesResultModal.modal('show');\n                }\n                if (data.result === 'success') {\n                    const language = data.subtitles;\n                    changeImage(subtitlePicked, 'images/yes16.png', 'subtitle saved', 'subtitle saved', 16, true);\n                    if ($('table#releasesPP').length > 0) {\n                        // Removes the release as we downloaded the subtitle\n                        // Only applied to manage_subtitleMissedPP.mako\n                        selectedEpisode.parent().parent().remove();\n                    } else {\n                        // Update the subtitles column with new informations\n                        if (subtitlesMulti === true) {\n                            // eslint-disable-line no-lonely-if\n                            const lang = language;\n                            let hasLang = false;\n                            subtitlesTd.children().children().each(function () {\n                                // Check if user already have this subtitle language\n                                if ($(this).attr('alt').indexOf(lang) !== -1) {\n                                    hasLang = true;\n                                }\n                            });\n                            // Only add language flag if user doesn't have this subtitle language\n                            if (hasLang === false) {\n                                changeImage(subtitlesTd, 'images/subtitles/flags/' + language + '.png', language, language, 11, false);\n                            }\n                        } else {\n                            changeImage(subtitlesTd, 'images/subtitles/flags/unknown.png', language, language, 11, false);\n                        }\n                    }\n                } else {\n                    changeImage(subtitlePicked, 'images/no16.png', 'subtitle not saved', 'subtitle not saved', 16, true);\n                }\n            });\n        });\n\n        $('#askmanualSubtitleSearchModal .btn').on('click', function () {\n            if ($(this).text().toLowerCase() === 'manual') {\n                // Call manual search\n                searchSubtitles();\n            } else {\n                // Call auto search\n                forcedSearch();\n            }\n        });\n    };\n\n    $.fn.ajaxEpMergeSubtitles = function () {\n        $('.epMergeSubtitles').on('click', function () {\n            const subtitlesMergeLink = $(this);\n            changeImage(subtitlesMergeLink, loadingSpinner, 'loading', 'loading', 16, true);\n            $.getJSON($(this).attr('href'), () => {\n                // Don't allow other merges\n                subtitlesMergeLink.remove();\n            });\n            return false;\n        });\n    };\n\n    $.ajaxEpRedownloadSubtitle = function () {\n        $('.epRedownloadSubtitle').on('click', function (e) {\n            e.preventDefault();\n            selectedEpisode = $(this);\n            $('#confirmSubtitleReDownloadModal').modal('show');\n        });\n\n        const redownloadSubtitles = () => {\n            disableAllSearches();\n            const url = selectedEpisode.prop('href');\n            const downloading = 'Re-downloading subtitle';\n            const failed = 'Re-downloaded subtitle failed';\n            const downloaded = 'Re-downloaded subtitle succeeded';\n            changeImage(selectedEpisode, loadingSpinner, downloading, downloading, 16, true);\n            $.getJSON(url, data => {\n                if (data.result.toLowerCase() === 'success' && data.new_subtitles.length > 0) {\n                    changeImage(selectedEpisode, 'images/save.png', downloaded, downloaded, 16, true);\n                } else {\n                    changeImage(selectedEpisode, 'images/no16.png', failed, failed, 16, true);\n                }\n            });\n            enableAllSearches();\n            return false;\n        };\n\n        $('#confirmSubtitleReDownloadModal .btn.btn-success').on('click', () => {\n            redownloadSubtitles();\n        });\n    };\n};\n\nmodule.exports = startAjaxEpisodeSubtitles;\n\n},{\"./core\":3}],2:[function(require,module,exports){\nconst baseUrl = $('body').attr('api-root');\nconst idToken = $('body').attr('api-key');\n\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\n\nmodule.exports = api;\n\n},{}],3:[function(require,module,exports){\nconst api = require('./api');\n\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nconst topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nconst apiRoot = $('body').attr('api-root');\nconst apiKey = $('body').attr('api-key');\n\nconst MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        const body = document.body;\n        $('[asset]').each(function () {\n            const asset = $(this).attr('asset');\n            const series = $(this).attr('series');\n            const path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta(pyVar, result) {\n        const reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, m => m[1].toUpperCase());\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass(_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nconst triggerConfigLoaded = function () {\n    // Create the event.\n    const event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(response => {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(err => {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{\"./api\":2}]},{},[1]);\n"],"file":"ajax-episode-subtitles.js"}