{"version":3,"names":[],"mappings":"","sources":["js/manage/index.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nconst baseUrl = $('body').attr('api-root');\nconst idToken = $('body').attr('api-key');\n\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\n\nmodule.exports = api;\n\n},{}],2:[function(require,module,exports){\nconst api = require('./api');\n\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nconst topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nconst apiRoot = $('body').attr('api-root');\nconst apiKey = $('body').attr('api-key');\n\nconst MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        const body = document.body;\n        $('[asset]').each(function () {\n            const asset = $(this).attr('asset');\n            const series = $(this).attr('series');\n            const path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta(pyVar, result) {\n        const reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, m => m[1].toUpperCase());\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass(_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nconst triggerConfigLoaded = function () {\n    // Create the event.\n    const event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(response => {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(err => {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{\"./api\":1}],3:[function(require,module,exports){\nconst MEDUSA = require('../core');\nMEDUSA.manage.index = function () {\n    $('.resetsorting').on('click', function () {\n        $('table').trigger('filterReset');\n    });\n\n    $('#massUpdateTable:has(tbody tr)').tablesorter({\n        sortList: [[1, 0]],\n        textExtraction: {\n            2: function (node) {\n                return $(node).find('span').text().toLowerCase();\n            }, // eslint-disable-line brace-style\n            3: function (node) {\n                return $(node).find('img').attr('alt');\n            }, // eslint-disable-line brace-style\n            4: function (node) {\n                return $(node).find('img').attr('alt');\n            }, // eslint-disable-line brace-style\n            5: function (node) {\n                return $(node).find('img').attr('alt');\n            }, // eslint-disable-line brace-style\n            6: function (node) {\n                return $(node).find('img').attr('alt');\n            }, // eslint-disable-line brace-style\n            7: function (node) {\n                return $(node).find('img').attr('alt');\n            }, // eslint-disable-line brace-style\n            8: function (node) {\n                return $(node).find('img').attr('alt');\n            }, // eslint-disable-line brace-style\n            9: function (node) {\n                return $(node).find('img').attr('alt');\n            } // eslint-disable-line brace-style\n        },\n        widgets: ['zebra', 'filter', 'columnSelector'],\n        headers: {\n            0: { sorter: false, filter: false },\n            1: { sorter: 'showNames' },\n            2: { sorter: 'quality' },\n            3: { sorter: 'sports' },\n            4: { sorter: 'scene' },\n            5: { sorter: 'anime' },\n            6: { sorter: 'flatfold' },\n            7: { sorter: 'paused' },\n            8: { sorter: 'subtitle' },\n            9: { sorter: 'default_ep_status' },\n            10: { sorter: 'status' },\n            11: { sorter: false },\n            12: { sorter: false },\n            13: { sorter: false },\n            14: { sorter: false },\n            15: { sorter: false },\n            16: { sorter: false }\n        },\n        widgetOptions: {\n            columnSelector_mediaquery: false // eslint-disable-line camelcase\n        }\n    });\n    $('#popover').popover({\n        placement: 'bottom',\n        html: true, // required if content has HTML\n        content: '<div id=\"popover-target\"></div>'\n    }).on('shown.bs.popover', function () {\n        // bootstrap popover event triggered when the popover opens\n        // call this function to copy the column selection code into the popover\n        $.tablesorter.columnSelector.attachTo($('#massUpdateTable'), '#popover-target');\n    });\n};\n\n},{\"../core\":2}]},{},[3]);\n"],"file":"index.js"}