{"version":3,"names":[],"mappings":"","sources":["js/manage/backlog-overview.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nvar topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nvar apiRoot = $('body').attr('api-root');\nvar apiKey = $('body').attr('api-key');\n\nvar MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nvar UTIL = {\n    exec: function (controller, action) {\n        var ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init: function () {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        var body = document.body;\n        $('[asset]').each(function () {\n            let asset = $(this).attr('asset');\n            let series = $(this).attr('series');\n            let path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        var controller = body.getAttribute('data-controller');\n        var action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta: function (pyVar, result) {\n        // eslint-disable-line no-unused-vars\n        var reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, function (m) {\n                return m[1].toUpperCase();\n            });\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass: function (_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nvar triggerConfigLoaded = function () {\n    // Create the event.\n    var event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(function (response) {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(function (err) {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{}],2:[function(require,module,exports){\nconst MEDUSA = require('../core');\nMEDUSA.manage.backlogOverview = function () {\n    checkForcedSearch();\n\n    function checkForcedSearch() {\n        var pollInterval = 5000;\n        var searchStatusUrl = 'home/getManualSearchStatus';\n        var showId = $('#series-id').val();\n        var url = showId === undefined ? searchStatusUrl : searchStatusUrl + '?show=' + showId;\n        $.ajax({\n            url: url,\n            error: function () {\n                pollInterval = 30000;\n            },\n            type: 'GET',\n            dataType: 'JSON',\n            complete: function () {\n                setTimeout(checkForcedSearch, pollInterval);\n            },\n            timeout: 15000 // timeout every 15 secs\n        }).done(function (data) {\n            if (data.episodes) {\n                pollInterval = 5000;\n            } else {\n                pollInterval = 15000;\n            }\n            updateForcedSearch(data);\n        });\n    }\n\n    function updateForcedSearch(data) {\n        $.each(data.episodes, function (name, ep) {\n            var el = $('a[id=' + ep.show + 'x' + ep.season + 'x' + ep.episode + ']');\n            var img = el.children('img[data-ep-search]');\n            var episodeStatus = ep.status.toLowerCase();\n            var episodeSearchStatus = ep.searchstatus.toLowerCase();\n            if (el) {\n                if (episodeSearchStatus === 'searching' || episodeSearchStatus === 'queued') {\n                    // el=$('td#' + ep.season + 'x' + ep.episode + '.search img');\n                    img.prop('src', 'images/loading16.gif');\n                } else if (episodeSearchStatus === 'finished') {\n                    // el=$('td#' + ep.season + 'x' + ep.episode + '.search img');\n                    if (episodeStatus.indexOf('snatched') >= 0) {\n                        img.prop('src', 'images/yes16.png');\n                        setTimeout(function () {\n                            img.parent().parent().parent().remove();\n                        }, 3000);\n                    } else {\n                        img.prop('src', 'images/search16.png');\n                    }\n                }\n            }\n        });\n    }\n\n    $('#pickShow').on('change', function () {\n        var id = $(this).val();\n        if (id) {\n            $('html,body').animate({ scrollTop: $('#show-' + id).offset().top - 25 }, 'slow');\n        }\n    });\n\n    $('#backlog_period').on('change', function () {\n        api.patch('config/main', {\n            backlogOverview: {\n                period: $(this).val()\n            }\n        }).then(function (response) {\n            log.info(response);\n            window.location.reload();\n        }).catch(function (err) {\n            log.error(err);\n        });\n    });\n\n    $('#backlog_status').on('change', function () {\n        api.patch('config/main', {\n            backlogOverview: {\n                status: $(this).val()\n            }\n        }).then(function (response) {\n            log.info(response);\n            window.location.reload();\n        }).catch(function (err) {\n            log.error(err);\n        });\n    });\n\n    $('.forceBacklog').on('click', function () {\n        $.get($(this).attr('href'));\n        $(this).text('Searching...');\n        return false;\n    });\n\n    $('.epArchive').on('click', function (event) {\n        event.preventDefault();\n        var img = $(this).children('img[data-ep-archive]');\n        img.prop('title', 'Archiving');\n        img.prop('alt', 'Archiving');\n        img.prop('src', 'images/loading16.gif');\n        var url = $(this).prop('href');\n        $.getJSON(url, function (data) {\n            // if they failed then just put the red X\n            if (data.result.toLowerCase() === 'success') {\n                img.prop('src', 'images/yes16.png');\n                setTimeout(function () {\n                    img.parent().parent().parent().remove();\n                }, 3000);\n            } else {\n                img.prop('src', 'images/no16.png');\n            }\n            return false;\n        });\n    });\n\n    $('.epSearch').on('click', function (event) {\n        event.preventDefault();\n        var img = $(this).children('img[data-ep-search]');\n        img.prop('title', 'Searching');\n        img.prop('alt', 'Searching');\n        img.prop('src', 'images/loading16.gif');\n        var url = $(this).prop('href');\n        $.getJSON(url, function (data) {\n            // if they failed then just put the red X\n            if (data.result.toLowerCase() === 'failed') {\n                img.prop('src', 'images/no16.png');\n            }\n            return false;\n        });\n    });\n};\n\n},{\"../core\":1}]},{},[2]);\n"],"file":"backlog-overview.js"}