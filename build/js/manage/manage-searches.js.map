{"version":3,"names":[],"mappings":"","sources":["js/manage/manage-searches.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nconst baseUrl = $('body').attr('api-root');\nconst idToken = $('body').attr('api-key');\n\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\n\nmodule.exports = api;\n\n},{}],2:[function(require,module,exports){\nconst api = require('./api');\n\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nconst topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nconst apiRoot = $('body').attr('api-root');\nconst apiKey = $('body').attr('api-key');\n\nconst MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        const body = document.body;\n        $('[asset]').each(function () {\n            const asset = $(this).attr('asset');\n            const series = $(this).attr('series');\n            const path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta(pyVar, result) {\n        const reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, m => m[1].toUpperCase());\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass(_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nconst triggerConfigLoaded = function () {\n    // Create the event.\n    const event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(response => {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(err => {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{\"./api\":1}],3:[function(require,module,exports){\nconst MEDUSA = require('../core');\n\nMEDUSA.manage.manageSearches = function () {\n    /**\n     * Get total number current scene exceptions per source. Will request medusa, xem and anidb name exceptions.\n     * @param exceptions - A list of exception types with their last_updates.\n     */\n    const updateExceptionTable = function (exceptions) {\n        const status = $('#sceneExceptionStatus');\n\n        const medusaException = exceptions.data.filter(({ id }) => id === 'local');\n        const cusExceptionDate = new Date(medusaException[0].lastRefresh * 1000).toLocaleDateString();\n\n        const xemException = exceptions.data.filter(({ id }) => id === 'xem');\n        const xemExceptionDate = new Date(xemException[0].lastRefresh * 1000).toLocaleDateString();\n\n        const anidbException = exceptions.data.filter(({ id }) => id === 'anidb');\n        const anidbExceptionDate = new Date(anidbException[0].lastRefresh * 1000).toLocaleDateString();\n\n        const table = $('<ul class=\"simpleList\"></ul>').append(`\n                <li>\n                    <a href=\"${MEDUSA.config.anonRedirect}https://github.com/pymedusa/Medusa/wiki/Scene-exceptions-and-numbering\">\n                        Last updated Medusa's exceptions\n                    </a>\n                    ${cusExceptionDate}\n                </li>\n            `).append(`\n                <li>\n                    <a href=\"${MEDUSA.config.anonRedirect}http://thexem.de\">\n                        Last updated xem exceptions\n                    </a>\n                    ${xemExceptionDate}\n                </li>\n            `).append(`<li>Last updated anidb exceptions ${anidbExceptionDate}</li>`);\n\n        status.append(table);\n        $('.forceSceneExceptionRefresh').removeClass('disabled');\n    };\n\n    /**\n     * Update an element with a spinner gif and a descriptive message.\n     * @param spinnerContainer - An element we can use to add the spinner and message to.\n     * @param message - A string with the message to display behind the spinner.\n     * @param showSpinner - A boolean to show or not show the spinner (gif).\n     */\n    const updateSpinner = function (spinnerContainer, message, showSpinner) {\n        if (showSpinner) {\n            message = `<img id=\"searchingAnim\" src=\"images/loading32${MEDUSA.config.themeSpinner}.gif\" height=\"16\" width=\"16\" />&nbsp;${message}`;\n        }\n        $(spinnerContainer).empty().append(message);\n    };\n\n    /**\n     * Trigger the force refresh of all the exception types.\n     */\n    $('.forceSceneExceptionRefresh').on('click', () => {\n        const status = $('#sceneExceptionStatus');\n        // Start a spinner.\n        updateSpinner(status, 'Retrieving scene exceptions...', true);\n\n        api.post('alias-source/all/operation', { type: 'REFRESH' }, {\n            timeout: 60000\n        }).then(response => {\n            status[0].innerHTML = '';\n            status.append($('<span></span>').text(response.data.result));\n\n            api.get('alias-source').then(response => {\n                updateExceptionTable(response);\n                $('.forceSceneExceptionRefresh').addClass('disabled');\n            }).catch(err => {\n                log.error('Trying to get scene exceptions failed with error: ' + err);\n                updateSpinner(status, 'Trying to get scene exceptions failed with error: ' + err, false);\n            });\n            updateSpinner(status, 'Finished updating scene exceptions.', false);\n        }).catch(err => {\n            log.error('Trying to update scene exceptions failed with error: ' + err);\n            updateSpinner(status, 'Trying to update scene exceptions failed with error: ' + err, false);\n        });\n    });\n\n    // Initially load the exception types last updates on page load.\n    api.get('alias-source').then(response => {\n        updateExceptionTable(response);\n    }).catch(err => {\n        log.error('Trying to get scene exceptions failed with error: ' + err);\n    });\n};\n\n},{\"../core\":2}]},{},[3]);\n"],"file":"manage-searches.js"}