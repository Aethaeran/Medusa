{"version":3,"names":[],"mappings":"","sources":["js/add-shows/init.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nconst MEDUSA = require('../core');\nMEDUSA.addShows.init = function () {\n    $('#tabs').tabs({\n        collapsible: true,\n        selected: MEDUSA.config.sortArticle ? -1 : 0\n    });\n\n    var imgLazyLoad = new LazyLoad({\n        // example of options object -> see options section\n        threshold: 500\n    });\n\n    $.initRemoteShowGrid = function () {\n        // Set defaults on page load\n        imgLazyLoad.update();\n        imgLazyLoad.handleScroll();\n        $('#showsort').val('original');\n        $('#showsortdirection').val('asc');\n\n        $('#showsort').on('change', function () {\n            var sortCriteria;\n            switch (this.value) {\n                case 'original':\n                    sortCriteria = 'original-order';\n                    break;\n                case 'rating':\n                    /* randomise, else the rating_votes can already\n                     * have sorted leaving this with nothing to do.\n                     */\n                    $('#container').isotope({ sortBy: 'random' });\n                    sortCriteria = 'rating';\n                    break;\n                case 'rating_votes':\n                    sortCriteria = ['rating', 'votes'];\n                    break;\n                case 'votes':\n                    sortCriteria = 'votes';\n                    break;\n                default:\n                    sortCriteria = 'name';\n                    break;\n            }\n            $('#container').isotope({\n                sortBy: sortCriteria\n            });\n        });\n\n        $('#rootDirs').on('change', function () {\n            $.rootDirCheck();\n        });\n\n        $('#showsortdirection').on('change', function () {\n            $('#container').isotope({\n                sortAscending: this.value === 'asc'\n            });\n        });\n\n        $('#container').isotope({\n            sortBy: 'original-order',\n            layoutMode: 'fitRows',\n            getSortData: {\n                name: function (itemElem) {\n                    var name = $(itemElem).attr('data-name') || '';\n                    return (MEDUSA.config.sortArticle ? name : name.replace(/^((?:The|A|An)\\s)/i, '')).toLowerCase();\n                },\n                rating: '[data-rating] parseInt',\n                votes: '[data-votes] parseInt'\n            }\n        }).on('layoutComplete arrangeComplete removeComplete', function () {\n            imgLazyLoad.update();\n            imgLazyLoad.handleScroll();\n        });\n    };\n\n    $.fn.loadRemoteShows = function (path, loadingTxt, errorTxt) {\n        $(this).html('<img id=\"searchingAnim\" src=\"images/loading32' + MEDUSA.config.themeSpinner + '.gif\" height=\"32\" width=\"32\" />&nbsp;' + loadingTxt);\n        $(this).load(path + ' #container', function (response, status) {\n            if (status === 'error') {\n                $(this).empty().html(errorTxt);\n            } else {\n                $.initRemoteShowGrid();\n                imgLazyLoad.update();\n                imgLazyLoad.handleScroll();\n            }\n        });\n    };\n\n    /*\n     * Blacklist a show by indexer and indexer_id\n     */\n    $.initBlackListShowById = function () {\n        $(document.body).on('click', 'button[data-blacklist-show]', function (e) {\n            e.preventDefault();\n\n            if ($(this).is(':disabled')) {\n                return false;\n            }\n\n            $(this).html('Blacklisted').prop('disabled', true);\n            $(this).parent().find('button[data-add-show]').prop('disabled', true);\n\n            $.get('addShows/addShowToBlacklist?indexer_id=' + $(this).attr('data-indexer-id'));\n            return false;\n        });\n    };\n\n    /*\n     * Adds show by indexer and indexer_id with a number of optional parameters\n     * The show can be added as an anime show by providing the data attribute: data-isanime=\"1\"\n     */\n    $.initAddShowById = function () {\n        $(document.body).on('click', 'button[data-add-show]', function (e) {\n            e.preventDefault();\n\n            if ($(this).is(':disabled')) {\n                return false;\n            }\n\n            $(this).html('Added').prop('disabled', true);\n            $(this).parent().find('button[data-blacklist-show]').prop('disabled', true);\n\n            var anyQualArray = [];\n            var bestQualArray = [];\n            $('#allowed_qualities option:selected').each(function (i, d) {\n                anyQualArray.push($(d).val());\n            });\n            $('#preferred_qualities option:selected').each(function (i, d) {\n                bestQualArray.push($(d).val());\n            });\n\n            // If we are going to add an anime, let's by default configure it as one\n            var anime = $('#anime').prop('checked');\n            var configureShowOptions = $('#configure_show_options').prop('checked');\n\n            $.get('addShows/addShowByID?indexer_id=' + $(this).attr('data-indexer-id'), {\n                root_dir: $('#rootDirs option:selected').val(), // eslint-disable-line camelcase\n                configure_show_options: configureShowOptions, // eslint-disable-line camelcase\n                indexer: $(this).attr('data-indexer'),\n                show_name: $(this).attr('data-show-name'), // eslint-disable-line camelcase\n                quality_preset: $('#qualityPreset').val(), // eslint-disable-line camelcase\n                default_status: $('#statusSelect').val(), // eslint-disable-line camelcase\n                any_qualities: anyQualArray.join(','), // eslint-disable-line camelcase\n                best_qualities: bestQualArray.join(','), // eslint-disable-line camelcase\n                default_flatten_folders: $('#flatten_folders').prop('checked'), // eslint-disable-line camelcase\n                subtitles: $('#subtitles').prop('checked'),\n                anime: anime,\n                scene: $('#scene').prop('checked'),\n                default_status_after: $('#statusSelectAfter').val() // eslint-disable-line camelcase\n            });\n            return false;\n        });\n\n        $('#saveDefaultsButton').on('click', function () {\n            var anyQualArray = [];\n            var bestQualArray = [];\n            $('#allowed_qualities option:selected').each(function (i, d) {\n                anyQualArray.push($(d).val());\n            });\n            $('#preferred_qualities option:selected').each(function (i, d) {\n                bestQualArray.push($(d).val());\n            });\n\n            $.get('config/general/saveAddShowDefaults', {\n                defaultStatus: $('#statusSelect').val(),\n                allowed_qualities: anyQualArray.join(','), // eslint-disable-line camelcase\n                preferred_qualities: bestQualArray.join(','), // eslint-disable-line camelcase\n                defaultFlattenFolders: $('#flatten_folders').prop('checked'),\n                subtitles: $('#subtitles').prop('checked'),\n                anime: $('#anime').prop('checked'),\n                scene: $('#scene').prop('checked'),\n                defaultStatusAfter: $('#statusSelectAfter').val()\n            });\n\n            $(this).prop('disabled', true);\n            new PNotify({ // eslint-disable-line no-new\n                title: 'Saved Defaults',\n                text: 'Your \"add show\" defaults have been set to your current selections.',\n                shadow: false\n            });\n        });\n\n        $('#statusSelect, #qualityPreset, #flatten_folders, #allowed_qualities, #preferred_qualities, #subtitles, #scene, #anime, #statusSelectAfter').on('change', function () {\n            $('#saveDefaultsButton').prop('disabled', false);\n        });\n\n        $('#qualityPreset').on('change', function () {\n            // fix issue #181 - force re-render to correct the height of the outer div\n            $('span.prev').click();\n            $('span.next').click();\n        });\n    };\n    $.updateBlackWhiteList = function (showName) {\n        $('#white').children().remove();\n        $('#black').children().remove();\n        $('#pool').children().remove();\n\n        if ($('#anime').prop('checked') && showName) {\n            $('#blackwhitelist').show();\n            if (showName) {\n                $.getJSON('home/fetch_releasegroups', {\n                    show_name: showName // eslint-disable-line camelcase\n                }, function (data) {\n                    if (data.result === 'success') {\n                        $.each(data.groups, function (i, group) {\n                            var option = $('<option>');\n                            option.prop('value', group.name);\n                            option.html(group.name + ' | ' + group.rating + ' | ' + group.range);\n                            option.appendTo('#pool');\n                        });\n                    }\n                });\n            }\n        } else {\n            $('#blackwhitelist').hide();\n        }\n    };\n};\n\n},{\"../core\":2}],2:[function(require,module,exports){\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nvar topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nvar apiRoot = $('body').attr('api-root');\nvar apiKey = $('body').attr('api-key');\n\nvar MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nvar UTIL = {\n    exec: function (controller, action) {\n        var ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init: function () {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        var body = document.body;\n        $('[asset]').each(function () {\n            let asset = $(this).attr('asset');\n            let series = $(this).attr('series');\n            let path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        var controller = body.getAttribute('data-controller');\n        var action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta: function (pyVar, result) {\n        // eslint-disable-line no-unused-vars\n        var reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, function (m) {\n                return m[1].toUpperCase();\n            });\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass: function (_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nvar triggerConfigLoaded = function () {\n    // Create the event.\n    var event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(function (response) {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(function (err) {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{}]},{},[1]);\n"],"file":"init.js"}