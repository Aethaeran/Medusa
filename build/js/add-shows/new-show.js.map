{"version":3,"names":[],"mappings":"","sources":["js/add-shows/new-show.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nconst MEDUSA = require('../core');\nMEDUSA.addShows.newShow = function () {\n    function updateSampleText() {\n        // if something's selected then we have some behavior to figure out\n\n        var showName;\n        var sepChar;\n        // if they've picked a radio button then use that\n        if ($('input:radio[name=whichSeries]:checked').length !== 0) {\n            showName = $('input:radio[name=whichSeries]:checked').val().split('|')[4];\n        } else if ($('input:hidden[name=whichSeries]').length !== 0 && $('input:hidden[name=whichSeries]').val().length !== 0) {\n            // if we provided a show in the hidden field, use that\n            showName = $('#providedName').val();\n        } else {\n            showName = '';\n        }\n        $.updateBlackWhiteList(showName);\n        var sampleText = 'Adding show <b>' + showName + '</b> into <b>';\n\n        // if we have a root dir selected, figure out the path\n        if ($('#rootDirs option:selected').length !== 0) {\n            var rootDirectoryText = $('#rootDirs option:selected').val();\n            if (rootDirectoryText.indexOf('/') >= 0) {\n                sepChar = '/';\n            } else if (rootDirectoryText.indexOf('\\\\') >= 0) {\n                sepChar = '\\\\';\n            } else {\n                sepChar = '';\n            }\n\n            if (rootDirectoryText.substr(sampleText.length - 1) !== sepChar) {\n                rootDirectoryText += sepChar;\n            }\n            rootDirectoryText += '<i>||</i>' + sepChar;\n\n            sampleText += rootDirectoryText;\n        } else if ($('#fullShowPath').length !== 0 && $('#fullShowPath').val().length !== 0) {\n            sampleText += $('#fullShowPath').val();\n        } else {\n            sampleText += 'unknown dir.';\n        }\n\n        sampleText += '</b>';\n\n        // if we have a show name then sanitize and use it for the dir name\n        if (showName.length > 0) {\n            $.get('addShows/sanitizeFileName', {\n                name: showName\n            }, function (data) {\n                $('#displayText').html(sampleText.replace('||', data));\n            });\n            // if not then it's unknown\n        } else {\n            $('#displayText').html(sampleText.replace('||', '??'));\n        }\n\n        // also toggle the add show button\n        if (($('#rootDirs option:selected').length !== 0 || $('#fullShowPath').length !== 0 && $('#fullShowPath').val().length !== 0) && // eslint-disable-line no-mixed-operators\n        $('input:radio[name=whichSeries]:checked').length !== 0 || // eslint-disable-line no-mixed-operators\n        $('input:hidden[name=whichSeries]').length !== 0 && $('input:hidden[name=whichSeries]').val().length !== 0) {\n            $('#addShowButton').prop('disabled', false);\n        } else {\n            $('#addShowButton').prop('disabled', true);\n        }\n    }\n\n    var searchRequestXhr = null;\n    function searchIndexers() {\n        if ($('#nameToSearch').val().length === 0) {\n            return;\n        }\n\n        if (searchRequestXhr) {\n            searchRequestXhr.abort();\n        }\n\n        var searchingFor = $('#nameToSearch').val().trim() + ' on ' + $('#providedIndexer option:selected').text() + ' in ' + $('#indexerLangSelect').val();\n        $('#searchResults').empty().html('<img id=\"searchingAnim\" src=\"images/loading32' + MEDUSA.config.themeSpinner + '.gif\" height=\"32\" width=\"32\" /> searching ' + searchingFor + '...');\n\n        searchRequestXhr = $.ajax({\n            url: 'addShows/searchIndexersForShowName',\n            data: {\n                search_term: $('#nameToSearch').val().trim(), // eslint-disable-line camelcase\n                lang: $('#indexerLangSelect').val(),\n                indexer: $('#providedIndexer').val()\n            },\n            timeout: parseInt($('#indexer_timeout').val(), 10) * 1000,\n            dataType: 'json',\n            error: function () {\n                $('#searchResults').empty().html('search timed out, try again or try another indexer');\n            }\n        }).done(function (data) {\n            var firstResult = true;\n            var resultStr = '<fieldset>\\n<legend class=\"legendStep\">Search Results:</legend>\\n';\n            var checked = '';\n\n            if (data.results.length === 0) {\n                resultStr += '<b>No results found, try a different search.</b>';\n            } else {\n                $.each(data.results, function (index, obj) {\n                    if (firstResult) {\n                        checked = ' checked';\n                        firstResult = false;\n                    } else {\n                        checked = '';\n                    }\n\n                    var whichSeries = obj.join('|');\n\n                    resultStr += '<input type=\"radio\" id=\"whichSeries\" name=\"whichSeries\" value=\"' + whichSeries.replace(/\"/g, '') + '\"' + checked + ' /> ';\n                    if (data.langid && data.langid !== '' && obj[1] === 1) {\n                        // For now only add the language id to the tvdb url, as the others might have different routes.\n                        resultStr += '<a href=\"' + MEDUSA.config.anonRedirect + obj[2] + obj[3] + '&lid=' + data.langid + '\" onclick=\"window.open(this.href, \\'_blank\\'); return false;\" ><b>' + obj[4] + '</b></a>';\n                    } else {\n                        resultStr += '<a href=\"' + MEDUSA.config.anonRedirect + obj[2] + obj[3] + '\" onclick=\"window.open(this.href, \\'_blank\\'); return false;\" ><b>' + obj[4] + '</b></a>';\n                    }\n\n                    if (obj[5] !== null) {\n                        var startDate = new Date(obj[5]);\n                        var today = new Date();\n                        if (startDate > today) {\n                            resultStr += ' (will debut on ' + obj[5] + ')';\n                        } else {\n                            resultStr += ' (started on ' + obj[5] + ')';\n                        }\n                    }\n\n                    if (obj[0] !== null) {\n                        resultStr += ' [' + obj[0] + ']';\n                    }\n\n                    resultStr += '<br>';\n                });\n                resultStr += '</ul>';\n            }\n            resultStr += '</fieldset>';\n            $('#searchResults').html(resultStr);\n            updateSampleText();\n            myform.loadsection(0); // eslint-disable-line no-use-before-define\n        });\n    }\n\n    $('#searchName').on('click', function () {\n        searchIndexers();\n    });\n\n    if ($('#nameToSearch').length !== 0 && $('#nameToSearch').val().length !== 0) {\n        $('#searchName').click();\n    }\n\n    $('#addShowButton').click(function () {\n        // if they haven't picked a show don't let them submit\n        if (!$('input:radio[name=\"whichSeries\"]:checked').val() && $('input:hidden[name=\"whichSeries\"]').val().length !== 0) {\n            alert('You must choose a show to continue'); // eslint-disable-line no-alert\n            return false;\n        }\n        generateBlackWhiteList(); // eslint-disable-line no-undef\n        $('#addShowForm').submit();\n    });\n\n    $('#skipShowButton').click(function () {\n        $('#skipShow').val('1');\n        $('#addShowForm').submit();\n    });\n\n    $('#qualityPreset').on('change', function () {\n        myform.loadsection(2); // eslint-disable-line no-use-before-define\n    });\n\n    /* jQuery Form to Form Wizard- (c) Dynamic Drive (www.dynamicdrive.com)\n    *  This notice MUST stay intact for legal use\n    *  Visit http://www.dynamicdrive.com/ for this script and 100s more. */\n\n    function goToStep(num) {\n        $('.step').each(function () {\n            if ($.data(this, 'section') + 1 === num) {\n                $(this).click();\n            }\n        });\n    }\n\n    $('#nameToSearch').focus();\n\n    // @TODO we need to move to real forms instead of this\n    var myform = new formtowizard({ // eslint-disable-line new-cap, no-undef\n        formid: 'addShowForm',\n        revealfx: ['slide', 500],\n        oninit: function () {\n            updateSampleText();\n            if ($('input:hidden[name=whichSeries]').length !== 0 && $('#fullShowPath').length !== 0) {\n                goToStep(3);\n            }\n        }\n    });\n\n    $('#rootDirText').change(updateSampleText);\n    $('#searchResults').on('change', '#whichSeries', updateSampleText);\n\n    $('#nameToSearch').keyup(function (event) {\n        if (event.keyCode === 13) {\n            $('#searchName').click();\n        }\n    });\n\n    $('#anime').change(function () {\n        updateSampleText();\n        myform.loadsection(2);\n    });\n\n    $('#rootDirs').on('change', function () {\n        updateSampleText();\n    });\n};\n\n},{\"../core\":3}],2:[function(require,module,exports){\nconst baseUrl = $('body').attr('api-root');\nconst idToken = $('body').attr('api-key');\n\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\n\nmodule.exports = api;\n\n},{}],3:[function(require,module,exports){\nconst api = require('./api');\n\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nconst topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nconst apiRoot = $('body').attr('api-root');\nconst apiKey = $('body').attr('api-key');\n\nconst MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        const body = document.body;\n        $('[asset]').each(function () {\n            const asset = $(this).attr('asset');\n            const series = $(this).attr('series');\n            const path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta(pyVar, result) {\n        const reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, m => m[1].toUpperCase());\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass(_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nconst triggerConfigLoaded = function () {\n    // Create the event.\n    const event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(response => {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(err => {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{\"./api\":2}]},{},[1]);\n"],"file":"new-show.js"}