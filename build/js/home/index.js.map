{"version":3,"names":[],"mappings":"","sources":["js/home/index.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nconst baseUrl = $('body').attr('api-root');\nconst idToken = $('body').attr('api-key');\n\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\n\nmodule.exports = api;\n\n},{}],2:[function(require,module,exports){\nconst api = require('./api');\n\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nconst topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nconst apiRoot = $('body').attr('api-root');\nconst apiKey = $('body').attr('api-key');\n\nconst MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        const body = document.body;\n        $('[asset]').each(function () {\n            const asset = $(this).attr('asset');\n            const series = $(this).attr('series');\n            const path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta(pyVar, result) {\n        const reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, m => m[1].toUpperCase());\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass(_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nconst triggerConfigLoaded = function () {\n    // Create the event.\n    const event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(response => {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(err => {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{\"./api\":1}],3:[function(require,module,exports){\nconst MEDUSA = require('../core');\nconst api = require('../api');\n\nMEDUSA.home.index = function () {\n    // Resets the tables sorting, needed as we only use a single call for both tables in tablesorter\n    $('.resetsorting').on('click', () => {\n        $('table').trigger('filterReset');\n    });\n\n    // Handle filtering in the poster layout\n    $('#filterShowName').on('input', _.debounce(() => {\n        $('.show-grid').isotope({\n            filter() {\n                const name = $(this).attr('data-name').toLowerCase();\n                return name.indexOf($('#filterShowName').val().toLowerCase()) > -1;\n            }\n        });\n    }, 500));\n\n    const imgLazyLoad = new LazyLoad({\n        // Example of options object -> see options section\n        threshold: 500\n    });\n\n    const resizePosters = newSize => {\n        let fontSize;\n        let logoWidth;\n        let borderRadius;\n        let borderWidth;\n        if (newSize < 125) {\n            // Small\n            borderRadius = 3;\n            borderWidth = 4;\n        } else if (newSize < 175) {\n            // Medium\n            fontSize = 9;\n            logoWidth = 40;\n            borderRadius = 4;\n            borderWidth = 5;\n        } else {\n            // Large\n            fontSize = 11;\n            logoWidth = 50;\n            borderRadius = 6;\n            borderWidth = 6;\n        }\n\n        // If there's a poster popup, remove it before resizing\n        $('#posterPopup').remove();\n\n        if (fontSize === undefined) {\n            $('.show-details').hide();\n        } else {\n            $('.show-details').show();\n            $('.show-dlstats, .show-quality').css('fontSize', fontSize);\n            $('.show-network-image').css('width', logoWidth);\n        }\n\n        $('.show-container').css({\n            width: newSize,\n            borderWidth,\n            borderRadius\n        });\n    };\n\n    let posterSize;\n    if (typeof Storage !== 'undefined') {\n        posterSize = parseInt(localStorage.getItem('posterSize'), 10);\n    }\n    if (typeof posterSize !== 'number' || isNaN(posterSize)) {\n        posterSize = 188;\n    }\n    resizePosters(posterSize);\n\n    $('#posterSizeSlider').slider({\n        min: 75,\n        max: 250,\n        value: posterSize,\n        change(e, ui) {\n            if (typeof Storage !== 'undefined') {\n                localStorage.setItem('posterSize', ui.value);\n            }\n            resizePosters(ui.value);\n            $('.show-grid').isotope('layout');\n        }\n    });\n\n    // This needs to be refined to work a little faster.\n    $('.progressbar').each(function () {\n        const percentage = $(this).data('progress-percentage');\n        const classToAdd = percentage === 100 ? 100 : percentage > 80 ? 80 : percentage > 60 ? 60 : percentage > 40 ? 40 : 20; // eslint-disable-line no-nested-ternary\n        $(this).progressbar({\n            value: percentage\n        });\n        if ($(this).data('progress-text')) {\n            $(this).append('<div class=\"progressbarText\" title=\"' + $(this).data('progress-tip') + '\">' + $(this).data('progress-text') + '</div>');\n        }\n        $(this).find('.ui-progressbar-value').addClass('progress-' + classToAdd);\n    });\n\n    $('img#network').on('error', function () {\n        $(this).parent().text($(this).attr('alt'));\n        $(this).remove();\n    });\n\n    $('#showListTableShows:has(tbody tr), #showListTableAnime:has(tbody tr)').tablesorter({\n        debug: false,\n        sortList: [[7, 1], [2, 0]],\n        textExtraction: function () {\n            return {\n                0(node) {\n                    return $(node).find('time').attr('datetime');\n                }, // eslint-disable-line brace-style\n                1(node) {\n                    return $(node).find('time').attr('datetime');\n                }, // eslint-disable-line brace-style\n                3(node) {\n                    return $(node).find('span').prop('title').toLowerCase();\n                }, // eslint-disable-line brace-style\n                4(node) {\n                    return $(node).find('a[data-indexer-name]').attr('data-indexer-name');\n                }, // eslint-disable-line brace-style\n                5(node) {\n                    return $(node).find('span').text().toLowerCase();\n                }, // eslint-disable-line brace-style\n                6(node) {\n                    return $(node).find('span:first').text();\n                }, // eslint-disable-line brace-style\n                7(node) {\n                    return $(node).data('show-size');\n                }, // eslint-disable-line brace-style\n                8(node) {\n                    return $(node).find('img').attr('alt');\n                }, // eslint-disable-line brace-style\n                10(node) {\n                    return $(node).find('img').attr('alt');\n                } // eslint-disable-line brace-style\n            };\n        }(),\n        widgets: ['saveSort', 'zebra', 'stickyHeaders', 'filter', 'columnSelector'],\n        headers: {\n            0: { sorter: 'realISODate' },\n            1: { sorter: 'realISODate' },\n            2: { sorter: 'loadingNames' },\n            4: { sorter: 'text' },\n            5: { sorter: 'quality' },\n            6: { sorter: 'eps' },\n            7: { sorter: 'digit' },\n            8: { filter: 'parsed' },\n            10: { filter: 'parsed' }\n        },\n        widgetOptions: {\n            filter_columnFilters: true, // eslint-disable-line camelcase\n            filter_hideFilters: true, // eslint-disable-line camelcase\n            filter_saveFilters: true, // eslint-disable-line camelcase\n            filter_functions: { // eslint-disable-line camelcase\n                5(e, n, f) {\n                    // eslint-disable-line complexity\n                    const pct = Math.floor(n % 1 * 1000);\n                    let test = false;\n                    if (f === '') {\n                        test = true;\n                    } else {\n                        let result = f.match(/(<|<=|>=|>)\\s+(\\d+)/i);\n                        if (result) {\n                            if (result[1] === '<') {\n                                if (pct < parseInt(result[2], 10)) {\n                                    test = true;\n                                }\n                            } else if (result[1] === '<=') {\n                                if (pct <= parseInt(result[2], 10)) {\n                                    test = true;\n                                }\n                            } else if (result[1] === '>=') {\n                                if (pct >= parseInt(result[2], 10)) {\n                                    test = true;\n                                }\n                            } else if (result[1] === '>') {\n                                if (pct > parseInt(result[2], 10)) {\n                                    test = true;\n                                }\n                            }\n                        }\n\n                        result = f.match(/(\\d+)\\s(-|to)\\s+(\\d+)/i);\n                        if (result) {\n                            if (result[2] === '-' || result[2] === 'to') {\n                                if (pct >= parseInt(result[1], 10) && pct <= parseInt(result[3], 10)) {\n                                    test = true;\n                                }\n                            }\n                        }\n\n                        result = f.match(/(=)?\\s?(\\d+)\\s?(=)?/i);\n                        if (result) {\n                            if (result[1] === '=' || result[3] === '=') {\n                                if (parseInt(result[2], 10) === pct) {\n                                    test = true;\n                                }\n                            }\n                        }\n\n                        if (!isNaN(parseFloat(f)) && isFinite(f)) {\n                            if (parseInt(f, 10) === pct) {\n                                test = true;\n                            }\n                        }\n                    }\n                    return test;\n                }\n            },\n            columnSelector_mediaquery: false // eslint-disable-line camelcase\n        },\n        sortStable: true,\n        sortAppend: [[2, 0]]\n    }).bind('sortEnd', () => {\n        imgLazyLoad.handleScroll();\n    }).bind('filterEnd', () => {\n        imgLazyLoad.handleScroll();\n    });\n\n    $('.show-grid').imagesLoaded(() => {\n        $('.loading-spinner').hide();\n        $('.show-grid').show().isotope({\n            itemSelector: '.show-container',\n            sortBy: MEDUSA.config.posterSortby,\n            sortAscending: MEDUSA.config.posterSortdir,\n            layoutMode: 'masonry',\n            masonry: {\n                isFitWidth: true\n            },\n            getSortData: {\n                name(itemElem) {\n                    const name = $(itemElem).attr('data-name') || '';\n                    return (MEDUSA.config.sortArticle ? name : name.replace(/^((?:The|A|An)\\s)/i, '')).toLowerCase();\n                },\n                network: '[data-network]',\n                date(itemElem) {\n                    const date = $(itemElem).attr('data-date');\n                    return date.length && parseInt(date, 10) || Number.POSITIVE_INFINITY;\n                },\n                progress(itemElem) {\n                    const progress = $(itemElem).attr('data-progress');\n                    return progress.length && parseInt(progress, 10) || Number.NEGATIVE_INFINITY;\n                },\n                indexer(itemElem) {\n                    const indexer = $(itemElem).attr('data-indexer');\n                    if (indexer === undefined) {\n                        return Number.NEGATIVE_INFINITY;\n                    }\n                    return indexer.length && parseInt(indexer, 10) || Number.NEGATIVE_INFINITY;\n                }\n            }\n        }).on('layoutComplete arrangeComplete removeComplete', () => {\n            imgLazyLoad.update();\n            imgLazyLoad.handleScroll();\n        });\n\n        // When posters are small enough to not display the .show-details\n        // table, display a larger poster when hovering.\n        let posterHoverTimer = null;\n        $('.show-container').on('mouseenter', function () {\n            const poster = $(this);\n            if (poster.find('.show-details').css('display') !== 'none') {\n                return;\n            }\n            posterHoverTimer = setTimeout(() => {\n                posterHoverTimer = null;\n                $('#posterPopup').remove();\n                const popup = poster.clone().attr({\n                    id: 'posterPopup'\n                });\n                const origLeft = poster.offset().left;\n                const origTop = poster.offset().top;\n                popup.css({\n                    position: 'absolute',\n                    margin: 0,\n                    top: origTop,\n                    left: origLeft\n                });\n                popup.find('.show-details').show();\n                popup.on('mouseleave', function () {\n                    $(this).remove();\n                });\n                popup.css({ zIndex: '9999' });\n                popup.appendTo('body');\n\n                const height = 438;\n                const width = 250;\n                let newTop = origTop + poster.height() / 2 - height / 2;\n                let newLeft = origLeft + poster.width() / 2 - width / 2;\n\n                // Make sure the popup isn't outside the viewport\n                const margin = 5;\n                const scrollTop = $(window).scrollTop();\n                const scrollLeft = $(window).scrollLeft();\n                const scrollBottom = scrollTop + $(window).innerHeight();\n                const scrollRight = scrollLeft + $(window).innerWidth();\n                if (newTop < scrollTop + margin) {\n                    newTop = scrollTop + margin;\n                }\n                if (newLeft < scrollLeft + margin) {\n                    newLeft = scrollLeft + margin;\n                }\n                if (newTop + height + margin > scrollBottom) {\n                    newTop = scrollBottom - height - margin;\n                }\n                if (newLeft + width + margin > scrollRight) {\n                    newLeft = scrollRight - width - margin;\n                }\n\n                popup.animate({\n                    top: newTop,\n                    left: newLeft,\n                    width: 250,\n                    height: 438\n                });\n            }, 300);\n        }).on('mouseleave', () => {\n            if (posterHoverTimer !== null) {\n                clearTimeout(posterHoverTimer);\n            }\n        });\n        imgLazyLoad.update();\n        imgLazyLoad.handleScroll();\n    });\n\n    $('#postersort').on('change', function () {\n        $('.show-grid').isotope({ sortBy: $(this).val() });\n        $.get($(this).find('option[value=' + $(this).val() + ']').attr('data-sort'));\n    });\n\n    $('#postersortdirection').on('change', function () {\n        $('.show-grid').isotope({ sortAscending: $(this).val() === 'true' });\n        $.get($(this).find('option[value=' + $(this).val() + ']').attr('data-sort'));\n    });\n\n    $('#popover').popover({\n        placement: 'bottom',\n        html: true,\n        content: '<div id=\"popover-target\"></div>'\n    }).on('shown.bs.popover', () => {\n        // Call this function to copy the column selection code into the popover\n        $.tablesorter.columnSelector.attachTo($('#showListTableShows'), '#popover-target');\n        if (MEDUSA.config.animeSplitHome) {\n            $.tablesorter.columnSelector.attachTo($('#showListTableAnime'), '#popover-target');\n        }\n    });\n\n    $('.show-option .show-layout').on('change', function () {\n        api.patch('config/main', {\n            layout: {\n                home: $(this).val()\n            }\n        }).then(response => {\n            log.info(response);\n            window.location.reload();\n        }).catch(err => {\n            log.info(err);\n        });\n    });\n\n    $('#showRootDir').on('change', function () {\n        api.patch('config/main', {\n            selectedRootIndex: parseInt($(this).val(), 10)\n        }).then(response => {\n            log.info(response);\n            window.location.reload();\n        }).catch(err => {\n            log.info(err);\n        });\n    });\n\n    const rootDir = MEDUSA.config.rootDirs;\n    const rootDirIndex = MEDUSA.config.selectedRootIndex;\n    if (rootDir) {\n        const backendDirs = rootDir.slice(1);\n        if (backendDirs.length >= 2) {\n            $('#showRoot').show();\n            const item = ['All Folders'];\n            const rootDirOptions = item.concat(backendDirs);\n            $.each(rootDirOptions, (i, item) => {\n                $('#showRootDir').append($('<option>', {\n                    value: i - 1,\n                    text: item\n                }));\n            });\n            $('select#showRootDir').prop('selectedIndex', rootDirIndex + 1);\n        } else {\n            $('#showRoot').hide();\n        }\n    }\n};\n\n},{\"../api\":1,\"../core\":2}]},{},[3]);\n"],"file":"index.js"}