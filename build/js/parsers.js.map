{"version":3,"names":[],"mappings":"","sources":["js/parsers.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nconst baseUrl = $('body').attr('api-root');\nconst idToken = $('body').attr('api-key');\n\nconst api = axios.create({\n    baseURL: baseUrl,\n    timeout: 10000,\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\n\nmodule.exports = api;\n\n},{}],2:[function(require,module,exports){\nconst api = require('./api');\n\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nconst topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nconst apiRoot = $('body').attr('api-root');\nconst apiKey = $('body').attr('api-key');\n\nconst MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        const body = document.body;\n        $('[asset]').each(function () {\n            const asset = $(this).attr('asset');\n            const series = $(this).attr('series');\n            const path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta(pyVar, result) {\n        const reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, m => m[1].toUpperCase());\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass(_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nconst triggerConfigLoaded = function () {\n    // Create the event.\n    const event = new CustomEvent('build', { detail: 'medusa config loaded' });\n    event.initEvent('build', true, true);\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(response => {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n        triggerConfigLoaded();\n    }).catch(err => {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\nmodule.exports = MEDUSA;\n\n},{\"./api\":1}],3:[function(require,module,exports){\nconst MEDUSA = require('./core');\n\n$.tablesorter.addParser({\n    id: 'loadingNames',\n    is: false,\n    format: s => {\n        if (s.indexOf('Loading...') === 0) {\n            return s.replace('Loading...', '000');\n        }\n        return MEDUSA.config.sortArticle ? s || '' : (s || '').replace(/^(The|A|An)\\s/i, '');\n    },\n    type: 'text'\n});\n$.tablesorter.addParser({\n    id: 'quality',\n    is: false,\n    format: s => {\n        const replacements = {\n            custom: 11,\n            bluray: 10, // Custom: Only bluray\n            hd1080p: 9,\n            '1080p': 8, // Custom: Only 1080p\n            hdtv: 7, // Custom: 1080p and 720p (only HDTV)\n            'web-dl': 6, // Custom: 1080p and 720p (only WEB-DL)\n            hd720p: 5,\n            '720p': 4, // Custom: Only 720p\n            hd: 3,\n            sd: 2,\n            any: 1,\n            best: 0\n        };\n        return replacements[s.toLowerCase()];\n    },\n    type: 'numeric'\n});\n$.tablesorter.addParser({\n    id: 'realISODate',\n    is: false,\n    format: s => new Date(s).getTime(),\n    type: 'numeric'\n});\n\n$.tablesorter.addParser({\n    id: 'cDate',\n    is: false,\n    format: s => s,\n    type: 'numeric'\n});\n$.tablesorter.addParser({\n    id: 'eps',\n    is: false,\n    format: s => {\n        const match = s.match(/^(.*)/);\n\n        if (match === null || match[1] === '?') {\n            return -10;\n        }\n\n        const nums = match[1].split(' / ');\n        if (nums[0].indexOf('+') !== -1) {\n            const numParts = nums[0].split('+');\n            nums[0] = numParts[0];\n        }\n\n        nums[0] = parseInt(nums[0], 10);\n        nums[1] = parseInt(nums[1], 10);\n\n        if (nums[0] === 0) {\n            return nums[1];\n        }\n\n        const pct = Math.round(nums[0] / nums[1] * 100) / 1000;\n        let finalNum = parseInt($('meta[data-var=\"max_download_count\"]').data('content') * nums[0] / nums[1], 10);\n        if (finalNum > 0) {\n            finalNum += nums[0];\n        }\n\n        return finalNum + pct;\n    },\n    type: 'numeric'\n});\n\n},{\"./core\":2}]},{},[3]);\n"],"file":"parsers.js"}